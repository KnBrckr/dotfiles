{
	"Shell Template": {
		"body": [
			"#!/bin/bash",
			"#",
			"# File: $TM_FILENAME",
			"# Description: ${1:description}",
			"#",
			"# More safety, by turning some bugs into errors.",
			"# Without `errexit` you don’t need ! and can replace",
			"# PIPESTATUS with a simple \\$?, but that's not done here.",
			"set -o errexit -o pipefail -o noclobber -o nounset",
			"",
			"# glob patterns matching no files expands to null string vs themselves",
			"shopt -s nullglob",
			"",
			"# glob patterns that fail result in expansion error",
			"# set -s failglob",
			"",
			"# -allow a command to fail with !’s side effect on errexit",
			"# -use return value from \\${PIPESTATUS[0]}, because ! hosed \\$?",
			"! getopt --test > /dev/null",
			"if [[ \\${PIPESTATUS[0]} -ne 4 ]]; then",
			"\techo \"Sorry, 'getopt --test' failed in this environment.\"",
			"\texit 1",
			"fi",
			"",
			"OPTIONS=dfo:v",
			"LONGOPTS=debug,force,output:,verbose",
			"",
			"# -regarding ! and PIPESTATUS see above",
			"# -temporarily store output to be able to check for errors",
			"# -activate quoting/enhanced mode (e.g. by writing out “--options”)",
			"# -pass arguments only via   -- \"\\$@\"   to separate them correctly",
			"! PARSED=\\$(getopt --options=\\$OPTIONS --longoptions=\\$LONGOPTS --name \"\\$0\" -- \"\\$@\")",
			"if [[ \\${PIPESTATUS[0]} -ne 0 ]]; then",
			"\t# e.g. return value is 1",
			"\t#  then getopt has complained about wrong arguments to stdout",
			"\texit 2",
			"fi",
			"# read getopt’s output this way to handle the quoting right:",
			"eval set -- \"\\$PARSED\"",
			"",
			"d=n f=n v=n outFile=-",
			"# now enjoy the options in order and nicely split until we see --",
			"while true; do",
			"\tcase \"\\$1\" in",
			"\t\t-d|--debug)",
			"\t\t\td=y",
			"\t\t\tshift",
			"\t\t\t;;",
			"\t\t-f|--force)",
			"\t\t\tf=y",
			"\t\t\tshift",
			"\t\t\t;;",
			"\t\t-v|--verbose)",
			"\t\t\tv=y",
			"\t\t\tshift",
			"\t\t\t;;",
			"\t\t-o|--output)",
			"\t\t\toutFile=\"\\$2\"",
			"\t\t\tshift 2",
			"\t\t\t;;",
			"\t\t--)",
			"\t\t\tshift",
			"\t\t\tbreak",
			"\t\t\t;;",
			"\t\t*)",
			"\t\t\techo \"Programming error\"",
			"\t\t\texit 3",
			"\t\t\t;;",
			"\tesac",
			"done",
			"",
			"# handle non-option arguments",
			"if [[ \\$# -ne 1 ]]; then",
			"\techo \"\\$0: A single input file is required.\"",
			"\texit 4",
			"fi",
			"",
			"echo \"verbose: \\$v, force: \\$f, debug: \\$d, in: \\$1, out: \\$outFile\""
		],
		"prefix": "template"
	}
}
