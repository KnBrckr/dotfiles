# gitconfig

[init]
  defaultBranch = main

[alias]
  # https://git.wiki.kernel.org/articles/a/l/i/Aliases.html
  
  # View defined aliases
  alias = !git config --get-regexp ^alias\\. | sort | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

  # Common aliases
  ci = commit
  co = checkout
  st = status
  br = branch

  type = cat-file -t
  dump = cat-file -p

  # `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
  # `git gc`: cleanup unnecessary files and optimize the local repository
  # `git clean -df`: remove untracked files and directories from the working tree
  # `git stash clear`: remove all stashed states
  trim = !git remote prune origin && git gc
  cleanup = !git clean -df && git stash clear

  # Add untracked, remove deleted, and show status
  adda = !git add -A && git status

  # Pretty git branch display
	b = "branch --format='%(color:#cccc00)%(objectname:short) %(color:red)%(committerdate:short) %(color:bold white)%(refname:short)'"

	# Ignore white space (-w) and copied (-C) lines in blame
	blame = blame -w -C

  # Fetch a repository ($1) and checkout its ref ($2) HEAD
  # Use: `git browse https://github.com/necolas/dotfiles <commit-ish>`
  browse = !bash -c 'git fetch $1 ${2:-HEAD} && git checkout FETCH_HEAD' -

  # Diff what is staged for the next commit
  diffc = diff --cached
  # Diff overview
  diffst = diff --stat

  # Custom graph log (append any tree-ish)
  graph = log --pretty=nice --date-order --graph
  # Custom graph log for all branches
  grapha = log --pretty=nice --date-order --graph --all

  # Pretty one-line
	l = "log --pretty=format:'%C(#cccc00)%h %Cred%ad %Creset%<(60,trunc)%s%C(auto)%d %C(magenta)%<(15,trunc)%an' --date=format:'%y%m%d'"
  # Custom pretty log
  logp = log --pretty=nice --graph --date=short
  # Short log with name and email
  loge = log --pretty='%Cred%h%Creset %s - %C(bold blue)%ae <%an>%Creset'
  # Full commit id, title and local name
  logf = log --pretty='%Cred%H%Creset %s - %C(bold blue)%aN %Creset'
	# Log only refids
	logref = log --pretty="%h"
	# Log without merges
	logm = log --no-merges --pretty=format:'%h | %ad | %s - %an' --date=format:'%Y-%m-%d'
  # Diffstat log
  logst = log --stat
  # Short format diffstat log
  logsf = log --stat --format=oneline --abbrev-commit

  # diffstat log for stash

  stashlog = stash list --stat --format=oneline --abbrev-commit

  # Fetch and checkout a GitHub Pull Request from a remote (defaults to `origin`)
  # Use: `git gh-pr 123` or `git gh-pr 123 upstream`
  gh-pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:gh-pr/$1 && git checkout gh-pr/$1' -

  # Find out who is currently active on the repository
  # Displays committers in descending order of number of commits
  who = shortlog --numbered --summary --email --no-merges --since='3 months'

  # List files changed since REVIEW_BASE
  files = !git diff --name-only $(git merge-base HEAD \"${REVIEW_BASE:-main}\")

  # List files changed since REVIEW_BASE excluding deleted files
  files-no-del = !git diff --name-only --diff-filter=d $(git merge-base HEAD \"${REVIEW_BASE:-main}\")

  # List files changed since REVIEW_BASE excluding deleted files
  files-del = !git diff --name-only --diff-filter=D $(git merge-base HEAD \"${REVIEW_BASE:-main}\")

  # Same as files but with diff --stat
  stat = !git diff --stat $(git merge-base HEAD \"${REVIEW_BASE:-main}\")

  # Review files changed since REVIEW_BASE (default main) using Diffview
  review = !nvim +\"DiffviewOpen ${REVIEW_BASE:-main}\"

  # Edit files changed since REVIEW_BASE (no tabs)
  edit = !nvim $(git files-no-del)
  # Edit files changed since REVIEW_BASE in tabs
  editt = !nvim -p $(git files-no-del)

  # gitlab integration
  # Requires: git config --add remote.origin.fetch '+refs/merge-requests/*:refs/remotes/origin/merge-requests/*'
  mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
  mro = !sh -c 'git checkout origin/merge-requests/$1/head' -

[color]
  # color opts: normal, black, red, green, yellow, blue, magenta, cyan, or white
  ui = auto
  interactive = auto

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore_global
  attributesfile = ~/.gitattributes

  autocrlf = input

	commentChar = auto

[branch]
	sort = -committerdate

[tag]
	# Sort tags according to version strings
	sort=version:refname

[diff]
  tool = nvimdiff
   
[merge]
  tool = nvimdiff

[difftool]
  prompt = false

[difftool "opendiff"]
  cmd = /usr/bin/opendiff \"$LOCAL\" \"$REMOTE\" -merge \"$MERGED\" | cat

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 

[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[pretty]
  # tut: http://gitimmersion.com/lab_10.html
  # ref: http://linux.die.net/man/1/git-log
  # Result: <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
  # nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"
  #
  # Result: <short-sha> <author-date> | <commit msg> (<pointer-names>)
  nice = "%C(yellow)%h%C(reset) %ad | %s%d"

[fetch]
  prune = true

[pull]
  rebase = true

[push]
  default = simple
  followTags = true
  
[filter "media"]
  clean = git media clean %f
  smudge = git media smudge %f
  required = true

[commit]
#  template = ~/.stCommitMsg

[rebase]
	autoSquash = true
	updateRefs = true

# Turn on "Reuse Recorded Resolution"
[rerere]
  enabled = true

# vim: filetype=gitconfig
