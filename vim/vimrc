" .vimrc

" Use 'vi' command to skip auto-load of plugins
if v:progname ==# 'vi'
  set noloadplugins
endif

" Use UTF-8 without Byte Order Mark (BOM)
set encoding=utf-8 nobomb
scriptencoding utf-8

" !silent is used to suppress error messages if the config line
" references plugins/colorschemes that might be missing
"
" Plugins are loaded AFTER vimrc runs. Replacing commands and key mappings
" must be done using the form to run after all VIM initialization and loading
" is complete:
"
"   autocmd VimEnter ...

" if hidden is not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=2

" don't give |ins-completion-menu| messages.
set shortmess+=c

" Show matching braces when cursor is over them
set showmatch

" Enable mouse access
set mouse+=a

" Enable vim modeline settings in files
set modeline

" Format options
set formatoptions=croqlnj

" Enable Spelling
set spell spelllang=en_us

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
" Revert with ":filetype off".
filetype plugin indent on

" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
augroup vimStartup
	" Remove all vimStartup autocommands
	au!

	" Remove conflicting definition from fedora if present
	silent! au! fedora BufReadPost

	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid, when inside an event handler
	" (happens when dropping a file on gvim) and for a commit message (it's
	" likely a different one than last time).
	autocmd BufReadPost *
				\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~ 'commit'
				\ |   exe "normal! g`\""
				\ | endif

augroup END

" vim merge support
nnoremap <leader>< :diffget LO<cr>
nnoremap <leader>> :diffget RE<cr>

" Markdown
let g:markdown_fenced_languages = ['c', 'python', 'bash=sh', 'cmake']

" Use system clipboard
if has('clipboard')
	set clipboard=unnamed
endif

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
if executable(s:clip)
	augroup WSLYank
		autocmd!
		autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
	augroup END
endif

if has('autocmd')
	" Load files for specific filetypes
	filetype on
	filetype indent on
	filetype plugin on

	" Languages with specific tabs/space requirements
	" Must disable editorconfig for the filetype lest it override the setting
	autocmd vimStartup FileType yaml let b:EditorConfig_disable = 1
	autocmd vimStartup FileType yaml setlocal ts=2 sts=2 sw=2

	" Automatically strip trailing whitespace on file save
	autocmd vimStartup BufWritePre *.css,*.html,*.js,*.json,*.md,*.php,*.py,*.rb,*.scss,*.sh,*.txt,*.c,*.h :call StripTrailingWhitespace()
	" Set autowrap for text files
	autocmd vimStartup BufRead,BufNewFile *.md,*.txt setlocal textwidth=80
endif

" Adjust solarized colors
function! OverrideSolarized() abort
	" Insert any highlight commands required to override color scheme defaults
	hi FgCocHintFloatBgCocFloating ctermbg=8

	" Enable undercurl support
	let &t_Cs = "\e[4:3m"
  let &t_Ce = "\e[4:0m"

	" Use undercurl for Spelling highlight groups
  hi SpellBad   guisp=red     gui=undercurl guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE term=underline cterm=undercurl ctermul=red
  hi SpellCap   guisp=yellow  gui=undercurl guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE term=underline cterm=undercurl ctermul=yellow
  hi SpellRare  guisp=blue    gui=undercurl guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE term=underline cterm=undercurl ctermul=blue
  hi SpellLocal guisp=magenta gui=undercurl guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE term=underline cterm=undercurl ctermul=magenta

	" Display comments in italic
	hi Comment cterm=italic
endfunction

augroup MyColors
	autocmd!
	autocmd ColorScheme solarized call OverrideSolarized()
augroup END

if has('syntax')
	syntax enable
	set background=dark
	silent! colorscheme solarized

	" Command to identify color group used for highlighted text on screen.
	command! SynID  echo synIDattr(synID(line("."), col("."), 1), "name")
endif

if has('cmdline_info')
	" Show the cursor line and column number
	set ruler
	" Show partial commands in status line
	set showcmd
	" Show whether in insert or replace mode
	set showmode
endif

if has('statusline')
	" Always show status line
	set laststatus=2
	" Broken down into easily includeable segments
	" Filename
	set statusline=%<%f\
	" Options
	set statusline+=%w%h%m%r
	" Current dir
	set statusline+=\ [%{getcwd()}]
	" Right aligned file nav info
	set statusline+=%=%-14.(%l,%c%V%)\ %p%%
endif

if has('wildmenu')
	" Show a list of possible completions
	set wildmenu
	" Tab autocomplete longest possible part of a string, then list
	set wildmode=longest,list
	if has ('wildignore')
		set wildignore+=*.a,*.pyc,*.o,*.orig
		set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png
		set wildignore+=.DS_Store,.git,.hg,.svn
		set wildignore+=*~,*.sw?,*.tmp
	endif
endif

if has('extra_search')
	" Highlight searches [use :noh to clear]
	set hlsearch
	" Highlight dynamically as pattern is typed
	set incsearch
	" Ignore case of searches...
	set ignorecase
	" ...unless has mixed case
	set smartcase
endif

" Backspace through everything in INSERT mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast

" No line wrapping
set nowrap
" Use 2 spaces for indentation
set shiftwidth=2
" Use 2 spaces for soft tab
set softtabstop=2
" Use 2 spaces for tab
set tabstop=2
" Expand tab to spaces
set noexpandtab
" Enable relative line numbers
set number relativenumber
" Highlight current line
set cursorline
" Start scrolling three lines before the horizontal window border
set scrolloff=3
" Don’t reset cursor to start of line when moving around.
set nostartofline

" Show 'invisible' characters
" set list
" Set characters used to indicate 'invisible' characters
set listchars=tab:▸\
set listchars+=trail:·
set listchars+=nbsp:_
set listchars+=eol:¬

" Centralize backups, swapfiles and undo history
set backupdir=$HOME/.vim/backups
set directory=$HOME/.vim/swaps
if exists('&undodir')
	set undodir=$HOME/.vim/undo
endif
set viminfo+=n$HOME/.vim/.viminfo

" Strip trailing whitespace
noremap <leader>$ :call StripTrailingWhitespace()<CR>

" Faster viewport scrolling (3 lines at a time)
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
vnoremap <C-e> 3<C-e>
vnoremap <C-y> 3<C-y>

" Quickfix navigation
" [q jumps to previous quick fix list item
" ]q jumps to next quick fix list item
nnoremap [q :cp<cr>
nnoremap ]q :cn<cr>

" Join selected range removing any trailing // comments within the line
function! JoinDefinitionFunc() range
	silent execute a:firstline . ',' . a:lastline . 's/\/\/.*$//'
	silent execute a:firstline . ',' . a:lastline . 'join'
endfunction
command! -range JoinDefinition <line1>,<line2> call JoinDefinitionFunc()

" Fixup Copyright header to current year
nnoremap <leader>fcr :%s/\(Copyright (c) \(\:\?\d*-\)\?\)\d\{4\}/\=strftime(submatch(1).'%Y')/<cr>

"--------------------------------------------------------------------------------
" C header guards
"
function! C_print_header()                                          
	if &modifiable
		let header_guard_name = toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
		let str_header_guard = ['#ifndef ' . header_guard_name,          
					\'#define ' . header_guard_name,                                 
					\'',                                                             
					\'#endif /* ' . header_guard_name . ' */']                       
		call setline(line('$'), str_header_guard)                          
	endif
endfunction

command! CPrintHeader :call C_print_header()                      
autocmd vimStartup BufNewFile *.h,*.hpp :CPrintHeader

"--------------------------------------------------------------------------------
" Build and test
"
nnoremap <f9> :make <CR>
nnoremap <f10> :make smoke-test <CR>
nnoremap <f11> :make test <CR>

"--------------------------------------------------------------------------------
" Complete delayed load of plugins
"

if &loadplugins && has('packages')
	packadd! cmake4vim
	packadd! coc.nvim
	packadd! gutentags_plus
	packadd! lightline.vim
	packadd! vim-gutentags

	" Terminal Debugging (see :help terminal-debug)
	packadd termdebug

	" Configure loaded plugins
	runtime plugins.vim

	if $TERM ==# 'tmux'
		" VIM + tmux navigation
		packadd! vim-tmux-navigator
	endif

	if $TERM ==# 'kitty'
		" VIM + Kitty Navigation
		packadd! vim-kitty-navigator
		" Kitty config syntax highlighting
		packadd! vim-kitty
	endif
endif

"--------------------------------------------------------------------------------
" Select which terminal navigation plugin to use
"

" Setup default mappings
nnoremap <silent> <c-h> :wincmd h <CR>
nnoremap <silent> <c-j> :wincmd j <CR>
nnoremap <silent> <c-k> :wincmd k <CR>
nnoremap <silent> <c-l> :wincmd l <CR>
nnoremap <silent> <c-\> :wincmd p <CR>

" Load local machine settings if they exist
if filereadable(glob('$HOME/.vimrc.local'))
	source $HOME/.vimrc.local
endif
