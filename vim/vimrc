" .vimrc

" Use UTF-8 without BOM
set encoding=utf-8 nobomb
scriptencoding utf-8

" !silent is used to suppress error messages if the config line
" references plugins/colorschemes that might be missing
"
" Plugins are loaded AFTER vimrc runs. Replacing commands and key mappings
" must be done using the form to run after all VIM initialization and loading
" is complete:
"
"   autocmd VimEnter ...

" Change update time (milliseconds) to more frequently update git gutter
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649 (for coc.nvim)
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Show matching braces when cursor is over them
set showmatch

" Enable mouse access
set mouse+=a

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
			\ pumvisible() ? "\<C-n>" :
			\ <SID>check_back_space() ? "\<TAB>" :
			\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completio
"inoremap <silent><expr> <c-space> coc#refresh()

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
" Revert with ":filetype off".
filetype plugin indent on

" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
augroup vimStartup
	au!

	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid, when inside an event handler
	" (happens when dropping a file on gvim) and for a commit message (it's
	" likely a different one than last time).
	autocmd BufReadPost *
				\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
				\ |   exe "normal! g`\""
				\ | endif

augroup END

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use [h and ]h to navigate git hunks
nmap <silent> [h <Plug>(coc-git-prevchunk)
nmap <silent> ]h <Plug>(coc-git-nextchunk)

" Show chunk diff at current position
nmap gs <Plug>(coc-git-chunkinfo)

" Stage the current chunk
nmap ga :CocCommand git.chunkStage <CR>

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Yank first diagnostic message for current line into the paste buffer.
nnoremap <silent> <leader>diag :call StatusDiagnosticToClipboard()<CR>
function! StatusDiagnosticToClipboard()
	call setreg('+','')
	let diagList=CocAction('diagnosticList')
	let line=line('.')
	for diagItem in diagList
		if line == diagItem['lnum']
			let str=diagItem['message']
			call setreg('+',str)
			return
		endif
	endfor
endfunction

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Markdown
let g:markdown_fenced_languages = ['c', 'python', 'bash=sh', 'cmake']

" Use system clipboard
if has("clipboard")
	set clipboard=unnamed
endif

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
if executable(s:clip)
	augroup WSLYank
		autocmd!
		autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
	augroup END
endif

if has("autocmd")
	" Load files for specific filetypes
	filetype on
	filetype indent on
	filetype plugin on

	" Languages with specific tabs/space requirements
	autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab
	" Automatically strip trailing whitespace on file save
	autocmd BufWritePre *.css,*.html,*.js,*.json,*.md,*.php,*.py,*.rb,*.scss,*.sh,*.txt,*.c,*.h :call StripTrailingWhitespace()
endif

if (has("termguicolors"))
	set termguicolors
endif

if has("syntax")
	syntax enable
	set background=dark
	packadd! vim-colors-solarized
	silent! colorscheme solarized

	" Syntax errors displayed by coc.nvim have formatting that conflicts with
	" theme - override
	hi link cocErrorFloat Error

	" Use subtle background color change for cursor line highlight
	autocmd vimStartup BufEnter * hi CursorLine ctermbg=0 guibg=Grey20
endif

if has("cmdline_info")
	" Show the cursor line and column number
	set ruler
	" Show partial commands in status line
	set showcmd
	" Show whether in insert or replace mode
	set showmode
endif

if has('statusline')
	" Always show status line
	set laststatus=2
	" Broken down into easily includeable segments
	" Filename
	set statusline=%<%f\
	" Options
	set statusline+=%w%h%m%r
	" Current dir
	set statusline+=\ [%{getcwd()}]
	" Right aligned file nav info
	set statusline+=%=%-14.(%l,%c%V%)\ %p%%
endif

if has("wildmenu")
	" Show a list of possible completions
	set wildmenu
	" Tab autocomplete longest possible part of a string, then list
	set wildmode=longest,list
	if has ("wildignore")
		set wildignore+=*.a,*.pyc,*.o,*.orig
		set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png
		set wildignore+=.DS_Store,.git,.hg,.svn
		set wildignore+=*~,*.sw?,*.tmp
	endif
endif

if has("extra_search")
	" Highlight searches [use :noh to clear]
	set hlsearch
	" Highlight dynamically as pattern is typed
	set incsearch
	" Ignore case of searches...
	set ignorecase
	" ...unless has mixed case
	set smartcase
endif

" Backspace through everything in INSERT mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast

" No line wrapping
set nowrap
" Use 2 spaces for indentation
set shiftwidth=2
" Use 2 spaces for soft tab
set softtabstop=2
" Use 2 spaces for tab
set tabstop=2
" Expand tab to spaces
set noexpandtab
" Enable relative line numbers
set number relativenumber
" Highlight current line
set cursorline
" Start scrolling three lines before the horizontal window border
set scrolloff=3
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Increase number of tabs allowed from default
set tabpagemax=30

" Show 'invisible' characters
" set list
" Set characters used to indicate 'invisible' characters
set listchars=tab:▸\
set listchars+=trail:·
set listchars+=nbsp:_
set listchars+=eol:¬

" Centralize backups, swapfiles and undo history
set backupdir=$HOME/.vim/backups
set directory=$HOME/.vim/swaps
if exists("&undodir")
	set undodir=$HOME/.vim/undo
endif
set viminfo+=n$HOME/.vim/.viminfo

" Strip trailing whitespace
noremap <leader>$ :call StripTrailingWhitespace()<CR>

" Faster viewport scrolling (3 lines at a time)
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
vnoremap <C-e> 3<C-e>
vnoremap <C-y> 3<C-y>

" Quickfix navigation
" [q jumps to previous quick fix list item
" ]q jumps to next quick fix list item
nnoremap [q :cp<cr>
nnoremap ]q :cn<cr>

" Redefine CTest command to include --output-on-failure
autocmd VimEnter * command! -nargs=? CTest :call cmake4vim#CTest('--output-on-failure', <f-args>)

" Quickfix list error format for ctest errors using CMocka environment
"
" General assertion failure:
"   [  ERROR   ] --- <error text>
"   [   LINE   ] --- <file>:<line>: error: Failure!
set errorformat^=%E[\ \ %tRROR\ \ \ ]\ ---\ %m,%Z[\ \ \ LINE\ \ \ ]\ ---\ %f:%l:\ %.%#
" fail() Error format: 
"   [ ERROR ] --- [   LINE   ] --- <file>|<line>| error: <error text>
set errorformat^=[\ \ %tRROR\ \ \ ]\ ---\ [\ \ \ LINE\ \ \ ]\ ---\ %f:%l:\ error:\ %m

" Join selected range removing any trailing // comments within the line
function! JoinDefinitionFunc() range
	silent execute a:firstline . ',' . a:lastline . 's/\/\/.*$//'
	silent execute a:firstline . ',' . a:lastline . 'join'
endfunction
command! -range JoinDefinition <line1>,<line2> call JoinDefinitionFunc()

" Configure FZF - Fuzzy finder. requires fzf binary be installed

" Display file list based on git repo
nnoremap <C-p> :GFiles<CR>

" Display Buffer list for quick navigation
nnoremap <Leader>b :Buffers<CR>

" AgIn: Start ag in the specified directory
"
" e.g.
"   :AgIn .. foo
function! s:ag_in(bang, ...)
	let start_dir=expand(a:1)

	if !isdirectory(start_dir)
		throw 'not a valid directory: ' . start_dir
	endif
	" Press `?' to enable preview window.
	call fzf#vim#ag(join(a:000[1:], ' '), fzf#vim#with_preview({'dir': start_dir}, 'right:50%:hidden', '?'), a:bang)
endfunction

command! -bang -nargs=+ -complete=dir AgIn call s:ag_in(<bang>0, <f-args>)

" Configure NERDTree

" start with NERDTree open on empty vim session
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Toggle display of NERDTree
nnoremap <Leader>t :NERDTreeToggle<CR>

" Find current file in NERDTree
nnoremap <Leader>v :NERDTreeFind<CR>

" Automatically close NERDTree when a file is opened
let NERDTreeQuitOnOpen = 1

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Use installed nerd fonts for git status symbols in NERDTree
let g:NERDTreeGitStatusUseNerdFonts = 1

" Load local machine settings if they exist
if filereadable(glob("$HOME/.vimrc.local"))
	source $HOME/.vimrc.local
endif

