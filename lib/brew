#!/bin/bash

run_brew() {
	if ! is_mac ; then
		return
	fi

	# Check for Homebrew
	if command_exists 'brew'; then
		e_header "Updating Homebrew..."
		# Use the latest version of Homebrew
		brew update
		[[ $? ]] && e_success "Done"

		e_header "Upgrading any existing Homebrew formulae..."
		# Upgrade any already-installed formulae
		brew upgrade
		[[ $? ]] && e_success "Done"

		e_header "Checking status of desired Homebrew formulae..."
		local -a desired_formulae=(
		  'asciidoctor'         # Format adoc files
			'bat'                 # Cat with syntax highlighting
			'carthage'            # Swift Library Dependency Manager
			'cheat'
			'coreutils'           # GNU core utilities (those that come with OS X are outdated)
			'cowsay'              # Just like it says... have some cowsay fun
			'exiftool'
			'fastfetch'           # system info reporter similar to neofetch
			'fzf'
			'git'
			'golang'
			'jq'                  # CLI JSON processor
			'mdcat'               # markdown to terminal
			'neovim'
			'node'                # Node environment (For bash language server)
			'pandoc'              # Document conversion
			'qmk/qmk/qmk'         # QMK Keyboard firmware development environment
			'ripgrep'             # Used by nvim Telescope Live Grep
			'swiftgen'            # Swift Code Generation tool
			'the_silver_searcher' # Fast grep and find alternative
			'tmux'                # Terminal Mux
			'tree-sitter-cli'     # Tree-sitter CLI 
			'wget'
    )

		local -a desired_casks=(
		  'font-hack-nerd-font'
	  )

		for pkgname in "${desired_formulae[@]}"
		do
			brew_install formula $pkgname
		done

		for pkgname in "${desired_casks[@]}"
		do
			brew_install cask $pkgname
		done

		e_success "Done"

		e_header "Remove outdated versions from Cellar"
		brew cleanup
	else
		printf "\n"
		e_error "Error: Homebrew not found."
		printf "Aborting...\n"
		exit 1
	fi

}

# Install a brew formula or cask
# @param $1 package type formula|cask
# @param $2 package name
brew_install() {
	case "$1" in
		formula)
			brew_opt=""
			;;

		cask)
			brew_opt="--cask"
			;;

		*)
			e_error "Usage: brew_install formula|cask <pkg>"
			exit 1
			;;
	esac

	# Package is already installed
	if brew_exists $brew_opt $2; then
		e_success $2
		return
	fi

	if ! brew install $brew_opt $2; then
		e_error "brew $brew_opt $2 failed"
		exit 1
	fi

	e_success $2
}

# Worker function testing for installed brew packages
# @param $1 options to brew list
# @param $2 brew package name
brew_exists() {
    if brew list "$@" >/dev/null 2>&1; then
        return 0
    fi

    return 1
}
