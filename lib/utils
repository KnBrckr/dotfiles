#!/bin/zsh

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -q REPLY\?"Continue? (y/n) "
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# Test whether we're in a git repo
is_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
}

is_launch_agent_enabled() {
	if launchctl list "$1" &> /dev/null; then
		return 0
	fi

	return 1
}

enable_launch_agent() {
	if ! is_launch_agent_enabled "$1"; then
		launch_agent="$DOTFILES/LaunchAgents/$1.plist"
		if [[ ! -f "$launch_agent" ]]; then
			e_error "Launch Agent not found for $1"
			return 1
		fi

		if ! launchctl load "$launch_agent"; then
			e_error "Unable to load Launch agent: $1"
			return 1
		fi

		if ! ln -s "$launch_agent" "$HOME/Library/LaunchAgents"; then
			e_error "Unable to setup Launch Agent for auto-load: $1"
			return 1
		fi
	fi
}

# Save backup of given file, skip if target is a link
backup_file() {
	if [ -z "${DOTFILES_BACKUPS}" ]; then
		e_error "DOTFILES_BACKUPS is not defined"
		exit 1
	fi

	if [ ! -d "${DOTFILES_BACKUPS}" ]; then
		e_error "DOTFILES_BACKUPS=${DOTFILES_BACKUPS} is not a directory"
		exit 1
	fi

	if [ ! -w "${DOTFILES_BACKUPS}" ]; then
		e_error "DOTFILES_BACKUPS=${DOTFILES_BACKUPS} is not writable"
		exit 1
	fi

	local src=${1}
	local dest=${DOTFILES_BACKUPS}/`basename ${1}`_`date +"%Y-%m-%d_%H%M%S"`
	if [ -f $src ] && [ ! -L $src ]; then
		# Make a backup of real file before trashing it
		if [ ! -d ${DOTFILES_BACKUPS} ]; then
			mkdir ${DOTFILES_BACKUPS}
		fi
		if cp -pn ${1} ${dest} ; then
			e_success "Saved copy of ${src} to ${dest}"
		else
			e_error "Unable to backup ${src} to ${dest}; bailing out."
			exit 1
		fi
	fi
}
