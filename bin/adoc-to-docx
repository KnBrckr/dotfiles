#!/bin/bash
#
# File: adoc-to-docx
# Description: Convert asciidoc file to docx
#
# Setup {{{
# More safety, by turning some bugs into errors.
# Without `errexit` you don’t need ! and can replace
# PIPESTATUS with a simple $?, but that's not done here.
set -o errexit -o pipefail -o noclobber -o nounset

# glob patterns matching no files expands to null string vs themselves
shopt -s nullglob

# glob patterns that fail result in expansion error
# set -s failglob

OPTIONS=hr:

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt $OPTIONS $*)
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

reference=
# now enjoy the options in order and nicely split until we see --
while true; do
	case "$1" in
		-h) 
			shift
			;;
		-r)
			reference="$2"
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			echo "Programming error"
			exit 3
			;;
	esac
done

# handle non-option arguments
if [[ $# -ne 1 ]]; then
    echo "$0: A single input file is required."
    exit 4
fi

adoc_file=$1


if [ ! -f "${adoc_file}" ]; then
	printf "${c_red}No file: %s${c_reset}\n" ${adoc_file}
	exit 1
fi

# docx reference doc for formatting
if [ -z $reference ]; then
	reference=$(dirname "$adoc_file")/custom-reference.docx
fi

if [ ! -f "${reference}" ]; then
	printf "${c_red}Can't find docx reference %s${c_reset}\n" "${reference}"
	exit 1
fi

# }}}
 
output=${adoc_file%adoc}docx
asciidoctor --backend=docbook --out-file - ${adoc_file} | pandoc --from docbook --to docx --reference-doc ${reference} --output ${output}

# vim: foldmethod=marker foldlevel=0
