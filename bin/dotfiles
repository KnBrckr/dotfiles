#!/bin/zsh

# Improve error handling and script safety
set -o errexit -o pipefail -o noclobber -o nounset

# Parse options
zmodload zsh/zutil

zparseopts -D -E -A opts -F - h=help -help=help \
           l=list -list=list \
           -no-packages=nopackages \
           -no-sync=nosync

# TODO This doesn't work with proxy based access

# Pickup VCS_* definitions required to setup git environment
if [[ -r "${HOME}/.shell_profile.local" ]]; then
	source "${HOME}/.shell_profile.local"
fi
: "${VCS_AUTHOR_NAME:?must be set}"
: "${VCS_AUTHOR_EMAIL:?must be set}"

if ! type git > /dev/null ; then
	echo "git is required to continue"
	exit 2
fi

DOTFILES="${HOME}/.dotfiles"
DOTFILES_BACKUPS="${DOTFILES}/backup"
DOTFILES_GIT_REMOTE="git@github.com:KnBrckr/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES} ]]; then
	printf "$(tput setaf 7)Cloning dotfiles...\033[m\n"
	set -e  # Exit if any of these commands fail
	git clone "${DOTFILES_GIT_REMOTE}" "${DOTFILES}"
	set +e  # Reset exit on error
fi

# Clone additional repos (vs. using submodules)
git clone git@github.com:alacritty/alacritty-theme.git ~/.config/alacritty-theme

cd ${DOTFILES}

if [ ! -d backup ]; then
	mkdir backup
fi

source ./shell/zsh_colors
source ./lib/help
source ./lib/list
source ./lib/utils
source ./lib/brew
source ./lib/pecl
source ./lib/npm
source ./lib/nvim
source ./lib/mirror_files
source ./shell/functions/is_platform
source ./shell/functions/command_exists

# Help text
if (( $#help )) ; then
	run_help
	exit 0
fi

# List additional software to install
if (( $#list )) ; then
	run_list
	exit 0
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
	e_header "Initializing git repository..."
	set -e  # Exit if any of these commands fail
	git init
	git remote add origin ${DOTFILES_GIT_REMOTE}
	git fetch origin master
	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	git reset --hard FETCH_HEAD
	# Remove any untracked files
	git clean -fd
	set +e # Reset exit on error
fi

# Load Oh My Zsh environment
if [ ! -d ~/.oh-my-zsh ]; then
	e_header "Installing Oh My Zsh!"
	sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

if is_mac; then
	# Before relying on Brew, check that packages can be compiled
	if ! command_exists 'gcc'; then
		e_error "The XCode Command Line Tools must be installed first."
		if ! command_exists xcode-select; then
			printf "  Install Apple's Xcode environment from the app store"
			printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
			exit 1
		fi
		e_header "Installing xcode command line tools"
		e_header "Restart dotfiles after xcode install is complete."
		xcode-select --install
		exit 1
	fi

	if ! gcc --version > /dev/null 2>&1 ; then
		e_header "Can't use gcc, trying sudo xcodebuild -license"
		if ! sudo xcodebuild -license; then
			e_error "Failed xcode setup; attempting to install CLI tools"
			e_header "Restart dotfiles after xcode install is complete."
			xcode-select --install
			exit 1
		fi
	fi

	# Check for Homebrew
	if ! command_exists 'brew'; then
		e_header "Installing Homebrew..."
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		eval "$(/opt/homebrew/bin/brew shellenv)"
	fi

	# Setup Launch Agents
	# enable_launch_agent com.pumastudios.keep-drives-spinning
fi

# Conditionally sync with the remote repository
if (( $#nosync )); then
	printf "Skipped dotfiles sync.\n"
else
	e_header "Syncing dotfiles..."
	# Pull down the latest changes
	git fetch origin

	# If directory is updated, dotfiles script itself may have changed.
	# In such a case, exit after updating local files, command must be
	# restarted
	
	LOCAL_REF=$(git rev-parse @)
	UPSTREAM_REF=$(git rev-parse @{u})
	BASE_REF=$(git merge-base @ @{u})
	
	RESTART=0
	if [ $LOCAL_REF = $UPSTREAM_REF ]; then
		e_info "Dotfiles up to date"
	elif [ $LOCAL_REF = $BASE_REF ]; then
		# Update local branch
		git pull
		RESTART=1
	elif [ $UPSTREAM_REF = $BASE_REF ]; then
		e_info "Push of local changes needed"
	else
		e_warning "Dotfiles has diverged ... trying rebase"
		git pull --rebase origin master
		RESTART=1
	fi

	# Update submodules
	e_header "Updating submodules"
	git submodule update --recursive --init --quiet

	if [ $RESTART -eq 1 ]; then
		e_info "Local files updated, restart dotfiles!"
		exit 1
	fi
fi

# Install and update packages
if (( $#nopackages )) ; then
	e_header "Skipping package installs."
else
	e_header "Updating packages..."

	# Install Homebrew formulae
	run_brew

	# Install PECL packages
	run_pecl

	# Install npm packages
	run_npm

	# neovim setup
	install_nvim_providers
fi

if command -v pyenv > /dev/null 2>&1 ; then
	e_header "Python version active:"
	pyenv version
	echo "Use 'pyenv install <version> ; pyenv global <version>;' to update python version" 
fi

# Install tmux plugin manager
if [ ! -d ~/.tmux/plugins/tpm ]; then
	e_header "Installing tmux plugin manager"
	"${DOTFILES}/bin/install_tmux_plugin_mgr"
fi

# Ask before potentially overwriting files
e_header "Mirroring dotfiles..."
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
	mirror_files
else
	printf "Skipped mirroring of dot files.\n"
fi

if is_mac; then
	# Ask before potentially overwriting OS X defaults
	e_header "Setting OSX Defaults..."
	seek_confirmation "Warning: This step may modify your OS X system defaults."

	if is_confirmed; then
		bash ./bin/osxdefaults
		e_success "OS X settings updated! You may need to restart."
	else
		printf "Skipped OS X settings update.\n"
	fi
fi
