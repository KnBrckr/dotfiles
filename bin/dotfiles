#!/bin/bash

# Improve error handling and script safety
set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
  echo "I’m sorry, 'getopt --test' failed in this environment."
  exit 1
fi                                                                                                                                                    
# Parse options
OPTIONS=hl
LONGOPTS=help,list,no-packages,no-sync

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

help=n list=n packages=y sync=y
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -h|--help)
            help=y
            shift
            ;;
        -l|--list)
            list=y
            shift
            ;;
	--no-packages)
	    packages=n
	    shift
	    ;;
	--no-sync)
            sync=n
	    shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# TODO This doesn't work with proxy based access

# Pickup VCS_* definitions required to setup git environment
if [[ -r "${HOME}/.shell_profile.local" ]]; then
	source "${HOME}/.shell_profile.local"
fi
: "${VCS_AUTHOR_NAME:?must be set}"
: "${VCS_AUTHOR_EMAIL:?must be set}"

if ! type git > /dev/null ; then
	echo "git is required to continue"
	exit 2
fi

DOTFILES="${HOME}/.dotfiles"
DOTFILES_BACKUPS="${DOTFILES}/backup"
DOTFILES_GIT_REMOTE="git@github.com:KnBrckr/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES} ]]; then
	printf "$(tput setaf 7)Cloning dotfiles...\033[m\n"
	set -e  # Exit if any of these commands fail
	git clone "${DOTFILES_GIT_REMOTE}" "${DOTFILES}"
	set +e  # Reset exit on error
fi

cd "${DOTFILES}"

if [ ! -d backup ]; then
	mkdir backup
fi

source ./shell/bash_colors
source ./lib/help
source ./lib/list
source ./lib/utils
source ./lib/brew
source ./lib/pecl
source ./lib/npm
source ./lib/mirror_files
source ./shell/functions/is_platform
source ./shell/functions/command_exists

# Help text
if [ $help = "y" ]; then
	run_help
	exit 0
fi

# List additional software to install
if [ $list = "y" ]; then
	run_list
	exit 0
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
	e_header "Initializing git repository..."
	set -e  # Exit if any of these commands fail
	git init
	git remote add origin ${DOTFILES_GIT_REMOTE}
	git fetch origin master
	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	git reset --hard FETCH_HEAD
	# Remove any untracked files
	git clean -fd
	set +e # Reset exit on error
fi

# Load Oh My Zsh environment
if [ ! -d ~/.oh-my-zsh ]; then
	e_header "Installing Oh My Zsh!"
	sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

if is_mac; then
	# Before relying on Brew, check that packages can be compiled
	if ! command_exists 'gcc'; then
		e_error "The XCode Command Line Tools must be installed first."
		if ! command_exists xcode-select; then
			printf "  Install Apple's Xcode environment from the app store"
			printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
			exit 1
		fi
		e_header "Installing xcode command line tools"
		e_header "Restart dotfiles after xcode install is complete."
		xcode-select --install
		exit 1
	fi

	if ! gcc --version > /dev/null 2>&1 ; then
		e_header "Can't use gcc, trying sudo xcodebuild -license"
		if ! sudo xcodebuild -license; then
			e_error "Failed xcode setup; attempting to install CLI tools"
			e_header "Restart dotfiles after xcode install is complete."
			xcode-select --install
			exit 1
		fi
	fi

	# Check for Homebrew
	if ! command_exists 'brew'; then
		e_header "Installing Homebrew..."
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	# Setup Launch Agents
	# enable_launch_agent com.pumastudios.keep-drives-spinning
fi

# Conditionally sync with the remote repository
if [ $sync = "n" ]; then
	printf "Skipped dotfiles sync.\n"
else
	e_header "Syncing dotfiles..."
	set -e # Exit if commands fail
	# Pull down the latest changes
	git pull --rebase origin master
	# Update submodules
	e_header "Updating submodules"
	git submodule update --recursive --init --quiet
	set +e # Reset exit on error
fi

# Install and update packages
if [ $packages = "n"  ]; then
	e_header "Skipping package installs."
else
	e_header "Updating packages..."

	# Install Homebrew formulae
	run_brew

	# Install PECL packages
	run_pecl
	# Install npm packages
	run_npm
fi

if command -v pyenv > /dev/null 2>&1 ; then
	e_header "Python version active:"
	pyenv version
	echo "Use 'pyenv install <version> ; pyenv global <version>;' to update python version" 
fi

# Install tmux plugin manager
if [ ! -d ~/.tmux/plugins/tpm ]; then
	e_header "Installing tmux plugin manager"
	"${DOTFILES}/bin/install_tmux_plugin_mgr"
fi

# Ask before potentially overwriting files
e_header "Mirroring dotfiles..."
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
	mirror_files
	source "${HOME}/.bash_profile"
else
	printf "Skipped mirroring of dot files.\n"
fi

if is_mac; then
	# Ask before potentially overwriting OS X defaults
	e_header "Setting OSX Defaults..."
	seek_confirmation "Warning: This step may modify your OS X system defaults."

	if is_confirmed; then
		bash ./bin/osxdefaults
		e_success "OS X settings updated! You may need to restart."
	else
		printf "Skipped OS X settings update.\n"
	fi
fi
