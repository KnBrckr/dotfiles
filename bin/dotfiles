#!/bin/bash

# TODO This doesn't work with proxy based access

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_BACKUPS="${DOTFILES_DIRECTORY}/backup"
DOTFILES_TARBALL_PATH="https://github.com/seiryu9/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:seiryu9/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
	printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
	mkdir ${DOTFILES_DIRECTORY}
	# Get the tarball (TODO add -x for proxy support)
	curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
	# Extract to the dotfiles directory
	tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
	# Remove the tarball
	rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/list
source ./lib/utils
source ./lib/brew
source ./lib/pecl
source ./lib/npm

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	run_help
	exit
fi

# List additional software to install
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
	run_list
	exit
fi

# Test for known flags
for opt in $@
do
	case $opt in
		--no-packages) no_packages=true ;;
		--no-sync) no_sync=true ;;
		-*|--*) e_warning "Warning: invalid option $opt" ;;
	esac
done

# Initialize the git repository if it's missing
if ! is_git_repo; then
	e_header "Initializing git repository..."
	set -e  # Exit if any of these commands fail
	git init
	git remote add origin ${DOTFILES_GIT_REMOTE}
	git fetch origin master
	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	git reset --hard FETCH_HEAD
	# Remove any untracked files
	git clean -fd
	set +e # Reset exit on error
fi

if is_mac; then
	# Before relying on Brew, check that packages can be compiled
	if ! type_exists 'gcc'; then
		e_error "The XCode Command Line Tools must be installed first."
		if ! type_exists xcode-select; then
			printf "  Install Apple's Xcode environment from the app store"
			printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
		    exit 1
		fi
		e_header "Installing xcode command line tools"
		xcode-select --install
	fi
	
	if ! gcc --version > /dev/null 2>&1 ; then
		e_header "Can't use gcc, trying sudo xcodebuild -license"
		sudo xcodebuild -license
	fi

	# Check for Homebrew
	if ! type_exists 'brew'; then
		e_header "Installing Homebrew..."
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi
	
	# Setup Launch Agents
	enable_launch_agent com.pumastudios.keep-drives-spinning
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
	printf "Skipped dotfiles sync.\n"
else
	e_header "Syncing dotfiles..."
	set -e # Exit if commands fail
	# Pull down the latest changes
	git pull --rebase origin master
	# Update submodules
	git submodule update --recursive --init --quiet
	set +e # Reset exit on error
fi

# Install and update packages on Mac
if is_mac; then
	if [[ $no_packages ]]; then
		printf "Skipped package installations.\n"
	else
		e_header "Updating packages..."
		# Install Homebrew formulae
		run_brew
		# Install npm packages
		run_npm
		# Install PECL packages
		run_pecl
	fi
fi

link() {
	# Make a backup of real file before trashing it
	backup_file ${HOME}/${2}

	# Force create/replace the symlink.
	ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirror_git() {
	# Copy `.gitconfig`.
	# Any global git commands in `~/.bash_profile.local` will be written to
	# `.gitconfig`. This prevents them being committed to the repository.
	: "${VCS_AUTHOR_NAME:?must be set}"
	: "${VCS_AUTHOR_EMAIL:?must be set}"
	backup_file ${HOME}/.gitconfig
	rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
	git config --global user.name "$VCS_AUTHOR_NAME"
	git config --global user.email "$VCS_AUTHOR_EMAIL"
}

mirrorfiles() {
	mirror_git

	# Force remove the vim directory if it's already there.
	if [ -d "${HOME}/.vim" ]; then
		rm -rf "${HOME}/.vim"
	fi

	# Create the necessary symbolic links between the `.dotfiles` and `HOME`
	# directory. The `bash_profile` sources other files directly from the
	# `.dotfiles` repository.
	link "shell/bashrc"					".bashrc"
	link "shell/bash_profile"			".bash_profile"
	link "shell/bash_logout"			".bash_logout"
	link "shell/curlrc"					".curlrc"
	link "shell/inputrc"				".inputrc"
	link "shell/zshrc"					".zshrc"
	link "shell/zprofile"				".zprofile"
	link "git/gitattributes"			".gitattributes"
	link "git/gitignore"				".gitignore_global"
	link "mercurial/hgignore.defaults"	".hgignore.defaults"
	link "vim"							".vim"
	link "vim/gvimrc"					".gvimrc"
	link "vim/vimrc"					".vimrc"

	e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
e_header "Mirroring dotfiles..."
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
	mirrorfiles
	source ${HOME}/.bash_profile
else
	printf "Skipped mirroring of dot files.\n"
fi

# Ask before potentially overwriting OS X defaults
e_header "Setting OSX Defaults..."
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
	bash ./bin/osxdefaults
	e_success "OS X settings updated! You may need to restart."
else
	printf "Skipped OS X settings update.\n"
fi
