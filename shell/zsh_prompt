#!/bin/zsh
# zsh_prompt

# Prompt Expansion: http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Prompt-Expansion
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim

# prompt_git() {
#     local s=""
#     local branchName=""
#
#     # check if the current directory is in a git repository
#     if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then
#
#         # check if the current directory is in .git before running git checks
#         if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then
#
#             # ensure index is up to date
#             git update-index --really-refresh  -q &>/dev/null
#
#             # check for uncommitted changes in the index
#             if ! $(git diff --quiet --ignore-submodules --cached); then
#                 s="$s+";
#             fi
#
#             # check for unstaged changes
#             if ! $(git diff-files --quiet --ignore-submodules --); then
#                 s="$s!";
#             fi
#
#             # check for untracked files
#             if [ -n "$(git ls-files --others --exclude-standard)" ]; then
#                 s="$s?";
#             fi
#
#             # check for stashed files
#             if $(git rev-parse --verify refs/stash &>/dev/null); then
#                 s="$s$";
#             fi
#
#         fi
#
#         # get the short symbolic ref
#         # if HEAD isn't a symbolic ref, get the short SHA
#         # otherwise, just give up
#         branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
#                       git rev-parse --short HEAD 2> /dev/null || \
#                       printf "(unknown)")"
#
#         [ -n "$s" ] && s=" [$s]"
#
#         printf "%s" "$1$branchName$s"
#     else
#         return
#     fi
# }

set_prompts() {

    local hostStyle=""
    local userStyle=""
	local seperator="%{$fg[white]%}|%{$color_reset%}"
	
	# Undo system default
	unset update_terminal_cwd
	unset PROMPT_COMMAND

    # build the prompt

    # logged in as root
    if [[ "$USER" == "root" ]]; then
        userStyle="%{$fg_bold$fg[red]%}"
    else
        userStyle="%{$fg[blue]%}"
    fi

    # connected via ssh
    if [[ "$SSH_TTY" ]]; then
        hostStyle="%{$fg_bold$fg[red]%}"
    else
        hostStyle="%{$fg[green]%}"
    fi

    # set the terminal title to user@host + current working directory
#    PS1="\[\033]0;\u@\h: \w\007\]"

	PS1=""

    PS1+="$userStyle%n" # username
    PS1+="$hostStyle@%m" # host
    PS1+="$seperator%{$fg[green]%}%1~$seperator" # working directory
	
    PS1+='$(git_prompt_info)' # git repository details
	PS1+="%(?:%{$fg_bold[green]%}√ :%{$fg_bold[red]%}⊝ )%{$reset_color%}"

    export PS1
}

set_prompts
unset set_prompts
